'use client';
import React from 'react';
import { useForm } from 'react-hook-form';
import { AlertCircle, ChevronDown } from 'lucide-react';
import { useCreateMCPServerMutation, useTestMCPConnectionMutation } from '@/redux/api/mcp/mcpApi';
import toast from 'react-hot-toast';

interface MCPConfig {
  serverName: string;
  serverId: string;
  serverType: string;
  serverUrl: string;
  authType: string;
  apiKey: string;
  timeout: number;
  retries: number;
  configYml?: string;
}

interface MCPToolsSetupProps {
  config: MCPConfig;
  connectionStatus: 'disconnected' | 'connecting' | 'connected';
  onConfigChange: (field: keyof MCPConfig, value: string | number) => void;
  onConnect: () => void;
  onNavigateToAvailableMCPs?: () => void;
}

export default function MCPToolsSetup({ 
  config, 
  connectionStatus, 
  onConfigChange, 
  onConnect,
  onNavigateToAvailableMCPs
}: MCPToolsSetupProps) {
  const {
    register,
    handleSubmit,
    formState: { errors, isValid },
    watch,
    setValue,
    getValues
  } = useForm<MCPConfig>({
    mode: 'onChange',
    defaultValues: config
  });

  const [createMCPServer, { isLoading: isCreating }] = useCreateMCPServerMutation();
  const [testMCPConnection, { isLoading: isTesting }] = useTestMCPConnectionMutation();

  const isConnecting = connectionStatus === 'connecting' || isCreating || isTesting;
  const canConnect = isValid && !isConnecting;

  // Watch for changes and update parent component
  React.useEffect(() => {
    const subscription = watch((value) => {
      Object.entries(value).forEach(([key, val]) => {
        if (val !== undefined) {
          onConfigChange(key as keyof MCPConfig, val);
        }
      });
    });
    return () => subscription.unsubscribe();
  }, [watch, onConfigChange]);

  // Auto-generate Server ID when Server Name changes (only if Server ID is empty)
  React.useEffect(() => {
    const serverName = watch('serverName');
    const serverId = watch('serverId');
    
    if (serverName && !serverId) {
      const autoGeneratedId = serverName.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '');
      setValue('serverId', autoGeneratedId);
    }
  }, [watch, setValue]);

  // Handle MCP server creation and connection
  const handleMCPServerConnect = async (formData: MCPConfig) => {
    try {
      // First test the connection
      toast.loading('Testing connection...', { id: 'mcp-test' });
      const testResult = await testMCPConnection({
        serverName: formData.serverName,
        serverId: formData.serverId,
        serverType: formData.serverType,
        serverUrl: formData.serverUrl,
        authType: formData.authType,
        apiKey: formData.apiKey,
        timeout: formData.timeout,
        retries: formData.retries,
        configYml: formData.configYml,
      }).unwrap();

      if (testResult.success) {
        toast.success('Connection test successful!', { id: 'mcp-test' });
        
        // Create the MCP server
        toast.loading('Creating MCP server...', { id: 'mcp-create' });
        const createResult = await createMCPServer({
          serverName: formData.serverName,
          serverId: formData.serverId,
          serverType: formData.serverType,
          serverUrl: formData.serverUrl,
          protocolVersion: '1.0',
          authType: formData.authType,
          apiKey: formData.apiKey,
          timeout: formData.timeout,
          retries: formData.retries,
          configYml: formData.configYml,
          customHeaders: {},
          metadata: {
            description: `${formData.serverName} MCP Server`,
            version: '1.0.0'
          }
        }).unwrap();

        toast.success('MCP server created successfully! Redirecting to Available MCPs...', { id: 'mcp-create' });
        
        // Call the parent onConnect callback
        onConnect();
        
        // Navigate to Available MCPs section after successful save
        if (onNavigateToAvailableMCPs) {
          // Add a small delay to ensure the toast is visible
          setTimeout(() => {
            onNavigateToAvailableMCPs();
          }, 1500);
        }
      } else {
        toast.error('Connection test failed: ' + testResult.message, { id: 'mcp-test' });
      }
    } catch (error: any) {
      console.error('MCP server creation failed:', error);
      toast.error(
        error?.data?.message || 
        error?.message || 
        'Failed to create MCP server. Please check your configuration.',
        { id: 'mcp-test' }
      );
    }
  };

  return (
    <div className="theme-card-bg rounded-sm p-6 theme-border border theme-shadow">
      <h3 className="text-xl font-semibold theme-text-primary mb-6">MCP Configuration Panel</h3>
      
      <div className="space-y-6">
        {/* Basic Configuration */}
        <div className="space-y-4">
          <h4 className="text-lg font-medium theme-text-primary flex items-center space-x-2">
            <span className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">1</span>
            <span>Basic Configuration</span>
          </h4>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Server Name <span className="text-red-500">*</span>
              </label>
              <input
                type="text"
                {...register('serverName', {
                  required: 'Server name is required',
                  minLength: {
                    value: 3,
                    message: 'Server name must be at least 3 characters'
                  },
                  pattern: {
                    value: /^[a-zA-Z0-9-_]+$/,
                    message: 'Server name can only contain letters, numbers, hyphens, and underscores'
                  }
                })}
                placeholder="e.g., weather-api-mcp"
                className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                  errors.serverName ? 'border-red-500' : ''
                }`}
                disabled={isConnecting}
              />
              {errors.serverName && (
                <p className="mt-1 text-sm text-red-500">{errors.serverName.message}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Server ID
              </label>
              <input
                type="text"
                {...register('serverId', {
                  pattern: {
                    value: /^[a-z0-9-]+$/,
                    message: 'Server ID can only contain lowercase letters, numbers, and hyphens'
                  },
                  validate: (value) => {
                    if (value && value.length < 3) {
                      return 'Server ID must be at least 3 characters if provided';
                    }
                    return true;
                  }
                })}
                placeholder="Server Id"
                className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                  errors.serverId ? 'border-red-500' : ''
                }`}
                disabled={isConnecting}
              />
              {errors.serverId && (
                <p className="mt-1 text-sm text-red-500">{errors.serverId.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Connection Type <span className="text-red-500">*</span>
              </label>
              <div className="relative">
                <select
                  {...register('serverType', {
                    required: 'Connection type is required'
                  })}
                  className={`w-full px-3 py-2 pr-10 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors appearance-none ${
                    errors.serverType ? 'border-red-500' : ''
                  }`}
                  disabled={isConnecting}
                >
                  <option value="">Select connection type</option>
                  <option value="http">HTTP/REST</option>
                  <option value="websocket">WebSocket</option>
                  <option value="stdio">Standard I/O</option>
                  <option value="tcp">TCP Socket</option>
                </select>
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 theme-text-muted pointer-events-none" />
              </div>
              {errors.serverType && (
                <p className="mt-1 text-sm text-red-500">{errors.serverType.message}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                MCP Protocol Version
              </label>
              <div className="relative">
                <select 
                  className="w-full px-3 py-2 pr-10 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors appearance-none"
                  disabled={isConnecting}
                >
                  <option value="1.0">MCP 1.0</option>
                  <option value="0.9">MCP 0.9 (Beta)</option>
                  <option value="0.8">MCP 0.8 (Legacy)</option>
                </select>
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 theme-text-muted pointer-events-none" />
              </div>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium theme-text-primary mb-2">
              Server URL/Endpoint <span className="text-red-500">*</span>
            </label>
            <input
              type="url"
              {...register('serverUrl', {
                required: 'Server URL is required',
                pattern: {
                  value: /^https?:\/\/.+|^wss?:\/\/.+|^stdio$|^tcp:\/\/.+/,
                  message: 'Please enter a valid URL (http/https/ws/wss) or stdio/tcp'
                }
              })}
              placeholder="https://api.example.com/mcp or ws://localhost:8080"
              className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                errors.serverUrl ? 'border-red-500' : ''
              }`}
              disabled={isConnecting}
            />
            {errors.serverUrl && (
              <p className="mt-1 text-sm text-red-500">{errors.serverUrl.message}</p>
            )}
          </div>

        </div>

        {/* Authentication Section */}
        <div className="space-y-4">
          <h4 className="text-lg font-medium theme-text-primary flex items-center space-x-2">
            <span className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-bold">2</span>
            <span>Authentication & Security</span>
          </h4>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Authentication Type
              </label>
              <div className="relative">
                <select
                  {...register('authType')}
                  className="w-full px-3 py-2 pr-10 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors appearance-none"
                  disabled={isConnecting}
                >
                  <option value="none">No Authentication</option>
                  <option value="api-key">API Key</option>
                  <option value="bearer">Bearer Token</option>
                  <option value="oauth2">OAuth 2.0</option>
                  <option value="basic">Basic Auth</option>
                  <option value="custom">Custom Headers</option>
                </select>
                <ChevronDown className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 theme-text-muted pointer-events-none" />
              </div>
            </div>
            
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                API Key / Token
              </label>
              <input
                type="password"
                {...register('apiKey', {
                  validate: (value) => {
                    const authType = watch('authType');
                    if (authType !== 'none' && !value) {
                      return 'API key is required when authentication is enabled';
                    }
                    return true;
                  }
                })}
                placeholder="Enter your API key or token"
                className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                  errors.apiKey ? 'border-red-500' : ''
                }`}
                disabled={isConnecting}
              />
              {errors.apiKey && (
                <p className="mt-1 text-sm text-red-500">{errors.apiKey.message}</p>
              )}
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Connection Timeout (ms)
              </label>
              <input
                type="number"
                {...register('timeout', {
                  required: 'Timeout is required',
                  min: {
                    value: 1000,
                    message: 'Timeout must be at least 1000ms'
                  },
                  max: {
                    value: 300000,
                    message: 'Timeout must not exceed 300000ms'
                  },
                  valueAsNumber: true
                })}
                min="1000"
                max="300000"
                className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                  errors.timeout ? 'border-red-500' : ''
                }`}
                disabled={isConnecting}
              />
              {errors.timeout && (
                <p className="mt-1 text-sm text-red-500">{errors.timeout.message}</p>
              )}
            </div>
            
            <div>
              <label className="block text-sm font-medium theme-text-primary mb-2">
                Max Retry Attempts
              </label>
              <input
                type="number"
                {...register('retries', {
                  required: 'Retry attempts is required',
                  min: {
                    value: 0,
                    message: 'Retry attempts must be at least 0'
                  },
                  max: {
                    value: 10,
                    message: 'Retry attempts must not exceed 10'
                  },
                  valueAsNumber: true
                })}
                min="0"
                max="10"
                className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors ${
                  errors.retries ? 'border-red-500' : ''
                }`}
                disabled={isConnecting}
              />
              {errors.retries && (
                <p className="mt-1 text-sm text-red-500">{errors.retries.message}</p>
              )}
            </div>
          </div>

          {/* Config YAML Section */}
          <div>
            <label className="block text-sm font-medium theme-text-primary mb-2">
              Configuration YAML (Optional)
            </label>
            <textarea
              {...register('configYml', {
                validate: (value) => {
                  if (value && value.trim()) {
                    // Basic YAML validation - check for common YAML syntax
                    const lines = value.trim().split('\n');
                    const hasValidStructure = lines.some(line => 
                      line.includes(':') || line.startsWith('-') || line.trim() === ''
                    );
                    if (!hasValidStructure) {
                      return 'Please enter valid YAML configuration';
                    }
                  }
                  return true;
                }
              })}
              placeholder="Enter YAML configuration (optional)&#10;Example:&#10;server:&#10;  host: localhost&#10;  port: 8080&#10;  timeout: 30s"
              rows={6}
              className={`w-full px-3 py-2 theme-border border rounded-sm theme-input-bg theme-input-text focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors resize-vertical ${
                errors.configYml ? 'border-red-500' : ''
              }`}
              disabled={isConnecting}
            />
            {errors.configYml && (
              <p className="mt-1 text-sm text-red-500">{errors.configYml.message}</p>
            )}
            <p className="mt-1 text-xs theme-text-muted">
              Optional YAML configuration for advanced server settings
            </p>
          </div>
        </div>

        {/* Connect Button */}
        <div className="flex justify-end pt-4 border-t theme-border">
          <button
            onClick={handleSubmit(handleMCPServerConnect)}
            disabled={!canConnect}
            className={`px-6 py-2 rounded-sm font-medium transition-colors flex items-center space-x-2 ${
              !canConnect
                ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                : 'bg-blue-600 text-white hover:bg-blue-700'
            }`}
          >
            {isConnecting && <AlertCircle className="w-4 h-4 animate-spin" />}
            <span>
              {isCreating ? 'Creating...' : 
               isTesting ? 'Testing...' : 
               isConnecting ? 'Connecting...' : 'Connect'}
            </span>
          </button>
        </div>
      </div>
    </div>
  );
}